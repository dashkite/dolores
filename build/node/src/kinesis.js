"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.putStream = exports.listConsumers = exports.hasStream = exports.getStreamARN = exports.getStream = exports.deleteStream = exports.addRecord = void 0;
var Kinesis = _interopRequireWildcard(require("@aws-sdk/client-kinesis"));
var STS = _interopRequireWildcard(require("@aws-sdk/client-sts"));
var _helpers = require("./helpers.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var AWS, addRecord, cache, deleteStream, getStream, getStreamARN, hasStream, listConsumers, putStream, region;
exports.putStream = putStream;
exports.listConsumers = listConsumers;
exports.hasStream = hasStream;
exports.getStreamARN = getStreamARN;
exports.getStream = getStream;
exports.deleteStream = deleteStream;
exports.addRecord = addRecord;
cache = {
  account: null
};
AWS = {
  Kinesis: (0, _helpers.lift)(Kinesis),
  STS: (0, _helpers.lift)(STS)
};
region = "us-east-1";
exports.getStreamARN = getStreamARN = async function (stream) {
  var account;
  account = await async function () {
    return cache.account != null ? cache.account : cache.account = (await AWS.STS.getCallerIdentity()).Account;
  }();
  return `arn:aws:kinesis:${region}:${account}:stream/${stream}`;
};
exports.getStream = getStream = async function (stream) {
  var _, error;
  try {
    ({
      StreamDescriptionSummary: _
    } = await AWS.Kinesis.describeStreamSummary({
      StreamName: stream
    }));
    return {
      _: _,
      arn: _.StreamARN,
      status: _.StreamStatus
    };
  } catch (error1) {
    error = error1;
    if (/ResourceNotFoundException/.test(error.toString())) {
      return void 0;
    } else {
      throw error;
    }
  }
};
exports.hasStream = hasStream = async function (stream) {
  if ((await getStream(stream)) != null) {
    return true;
  } else {
    return false;
  }
};
exports.putStream = putStream = async function (stream) {
  if (!(await hasStream(stream))) {
    return await AWS.Kinesis.createStream({
      StreamName: stream,
      StreamModeDetails: {
        StreamMode: "ON_DEMAND"
      }
    });
  }
};
exports.deleteStream = deleteStream = async function (stream) {
  if (await hasStream(stream)) {
    return await AWS.Kinesis.deleteStream({
      StreamName: stream
    });
  }
};
exports.addRecord = addRecord = async function ({
  stream,
  partition,
  data
}) {
  return await AWS.Kinesis.putRecord({
    StreamName: stream,
    PartitionKey: partition,
    Data: Buffer.from(JSON.stringify(data), "utf8")
  });
};
exports.listConsumers = listConsumers = async function (stream) {
  var Consumers, NextToken, next, results;
  results = [];
  next = void 0;
  while (true) {
    ({
      Consumers,
      NextToken
    } = await AWS.Kinesis.listStreamConsumers({
      StreamARN: stream.arn,
      NextToken: next
    }));
    next = NextToken;
    results.push(...Consumers);
    if (next == null) {
      return results;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,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LENBQUMsWUFBWixDQUF5QjtNQUFBLFVBQUEsRUFBWTtJQUFaLENBQXpCLENBRFI7O0FBRGEsQ0FBQTtBQUlmLE9BQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQSxHQUFZLGVBQUEsQ0FBQztFQUFFLE1BQUY7RUFBVSxTQUFWO0VBQXFCO0FBQXJCLENBQUQsRUFBQTtFQUNWLE9BQUEsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVosQ0FDSjtJQUFBLFVBQUEsRUFBWSxNQUFaO0lBQ0EsWUFBQSxFQUFjLFNBRGQ7SUFFQSxJQUFBLEVBQU0sTUFBTSxDQUFDLElBQVAsQ0FBYyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBZCxFQUFxQyxNQUFyQztFQUZOLENBREksQ0FBTjtBQURVLENBQUE7QUFNWixPQUFBLENBQUEsYUFBQSxHQUFBLGFBQUEsR0FBZ0IsZUFBQSxDQUFDLE1BQUQsRUFBQTtFQUNoQixJQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUE7RUFBRSxPQUFBLEdBQVUsRUFBQTtFQUNWLElBQUEsR0FBTyxLQUFBLENBQUE7RUFDUCxPQUFNLElBQU4sRUFBQTtJQUNFLENBQUE7TUFBRSxTQUFGO01BQWE7SUFBYixDQUFBLEdBQTJCLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxtQkFBWixDQUMvQjtNQUFBLFNBQUEsRUFBVyxNQUFNLENBQUMsR0FBbEI7TUFDQSxTQUFBLEVBQVc7SUFEWCxDQUR5QixDQUEzQjtJQUlBLElBQUEsR0FBTyxTQUFBO0lBQ1AsT0FBTyxDQUFDLElBQVIsQ0FBYSxHQUFBLFNBQWIsQ0FBQTtJQUNBLElBQUksSUFBQSxJQUFBLElBQUosRUFBQTtNQUNFLE9BQU8sT0FEVDs7RUFQRjtBQUhjLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBLaW5lc2lzIGZyb20gXCJAYXdzLXNkay9jbGllbnQta2luZXNpc1wiXG5pbXBvcnQgKiBhcyBTVFMgZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zdHNcIlxuaW1wb3J0IHsgbGlmdCwgcGFydGl0aW9uIH0gZnJvbSBcIi4vaGVscGVyc1wiXG5cbmNhY2hlID1cbiAgYWNjb3VudDogbnVsbFxuXG5BV1MgPVxuICBLaW5lc2lzOiBsaWZ0IEtpbmVzaXNcbiAgU1RTOiBsaWZ0IFNUU1xuXG5yZWdpb24gPSBcInVzLWVhc3QtMVwiXG5cbmdldFN0cmVhbUFSTiA9IChzdHJlYW0pIC0+XG4gIGFjY291bnQgPSBhd2FpdCBkbyAtPlxuICAgIGNhY2hlLmFjY291bnQgPz0gKCBhd2FpdCBBV1MuU1RTLmdldENhbGxlcklkZW50aXR5KCkgKS5BY2NvdW50XG4gIFwiYXJuOmF3czpraW5lc2lzOiN7cmVnaW9ufToje2FjY291bnR9OnN0cmVhbS8je3N0cmVhbX1cIlxuXG5nZXRTdHJlYW0gPSAoc3RyZWFtKSAtPlxuICB0cnlcbiAgICB7IFN0cmVhbURlc2NyaXB0aW9uU3VtbWFyeTogXyB9ID0gXG4gICAgICBhd2FpdCBBV1MuS2luZXNpcy5kZXNjcmliZVN0cmVhbVN1bW1hcnkgU3RyZWFtTmFtZTogc3RyZWFtXG4gICAgXzogX1xuICAgIGFybjogXy5TdHJlYW1BUk5cbiAgICBzdGF0dXM6IF8uU3RyZWFtU3RhdHVzXG4gIGNhdGNoIGVycm9yXG4gICAgaWYgL1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb24vLnRlc3QgZXJyb3IudG9TdHJpbmcoKVxuICAgICAgdW5kZWZpbmVkXG4gICAgZWxzZVxuICAgICAgdGhyb3cgZXJyb3JcblxuaGFzU3RyZWFtID0gKHN0cmVhbSkgLT5cbiAgaWYgKCBhd2FpdCBnZXRTdHJlYW0gc3RyZWFtICk/XG4gICAgdHJ1ZVxuICBlbHNlXG4gICAgZmFsc2VcblxucHV0U3RyZWFtID0gKHN0cmVhbSkgLT5cbiAgaWYgISggYXdhaXQgaGFzU3RyZWFtIHN0cmVhbSApXG4gICAgYXdhaXQgQVdTLktpbmVzaXMuY3JlYXRlU3RyZWFtIFxuICAgICAgU3RyZWFtTmFtZTogc3RyZWFtXG4gICAgICBTdHJlYW1Nb2RlRGV0YWlsczogXG4gICAgICAgIFN0cmVhbU1vZGU6IFwiT05fREVNQU5EXCJcblxuZGVsZXRlU3RyZWFtID0gKHN0cmVhbSkgLT5cbiAgaWYgYXdhaXQgaGFzU3RyZWFtIHN0cmVhbVxuICAgIGF3YWl0IEFXUy5LaW5lc2lzLmRlbGV0ZVN0cmVhbSBTdHJlYW1OYW1lOiBzdHJlYW1cblxuYWRkUmVjb3JkID0gKHsgc3RyZWFtLCBwYXJ0aXRpb24sIGRhdGEgfSkgLT5cbiAgYXdhaXQgQVdTLktpbmVzaXMucHV0UmVjb3JkIFxuICAgIFN0cmVhbU5hbWU6IHN0cmVhbVxuICAgIFBhcnRpdGlvbktleTogcGFydGl0aW9uXG4gICAgRGF0YTogQnVmZmVyLmZyb20gKCBKU09OLnN0cmluZ2lmeSBkYXRhICksIFwidXRmOFwiXG5cbmxpc3RDb25zdW1lcnMgPSAoc3RyZWFtKSAtPlxuICByZXN1bHRzID0gW11cbiAgbmV4dCA9IHVuZGVmaW5lZFxuICB3aGlsZSB0cnVlXG4gICAgeyBDb25zdW1lcnMsIE5leHRUb2tlbiB9ID0gYXdhaXQgQVdTLktpbmVzaXMubGlzdFN0cmVhbUNvbnN1bWVyc1xuICAgICAgU3RyZWFtQVJOOiBzdHJlYW0uYXJuXG4gICAgICBOZXh0VG9rZW46IG5leHRcblxuICAgIG5leHQgPSBOZXh0VG9rZW5cbiAgICByZXN1bHRzLnB1c2ggQ29uc3VtZXJzLi4uXG4gICAgaWYgIW5leHQ/XG4gICAgICByZXR1cm4gcmVzdWx0c1xuXG5leHBvcnQge1xuICBnZXRTdHJlYW1BUk5cbiAgZ2V0U3RyZWFtXG4gIGhhc1N0cmVhbVxuICBwdXRTdHJlYW1cbiAgZGVsZXRlU3RyZWFtXG4gIGFkZFJlY29yZFxuICBsaXN0Q29uc3VtZXJzXG59Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=src/kinesis.coffee