"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasCertificate = exports.getCertificateARN = exports.getCertificate = void 0;
var _clientAcm = require("@aws-sdk/client-acm");
var AWS,
  getCertificate,
  getCertificateARN,
  hasCertificate,
  indexOf = [].indexOf;
exports.hasCertificate = hasCertificate;
exports.getCertificateARN = getCertificateARN;
exports.getCertificate = getCertificate;
AWS = {
  ACM: new _clientAcm.ACM({
    region: "us-east-1"
  })
};
exports.hasCertificate = hasCertificate = async function (domain) {
  return (await getCertification(domain)) != null;
};
exports.getCertificate = getCertificate = async function (domain) {
  var Certificate, CertificateArn, CertificateSummaryList, i, len;
  ({
    CertificateSummaryList
  } = await AWS.ACM.listCertificates({
    CertificateStatuses: ["ISSUED"]
  }));
  for (i = 0, len = CertificateSummaryList.length; i < len; i++) {
    ({
      CertificateArn
    } = CertificateSummaryList[i]);
    ({
      Certificate
    } = await AWS.ACM.describeCertificate({
      CertificateArn
    }));
    if (indexOf.call(Certificate.SubjectAlternativeNames, domain) >= 0) {
      return {
        _: Certificate,
        arn: CertificateArn
      };
    }
  }
  return void 0;
};
exports.getCertificateARN = getCertificateARN = async function (domain) {
  return (await getCertificate(domain)).arn;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hY20uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLEdBQUE7RUFBQSxjQUFBO0VBQUEsaUJBQUE7RUFBQSxjQUFBO0VBQUEsT0FBQSxHQUFBLEVBQUEsQ0FBQSxPQUFBO0FBQUEsT0FBQSxDQUFBLGNBQUEsR0FBQSxjQUFBO0FBQUEsT0FBQSxDQUFBLGlCQUFBLEdBQUEsaUJBQUE7QUFBQSxPQUFBLENBQUEsY0FBQSxHQUFBLGNBQUE7QUFFQSxHQUFBLEdBQ0U7RUFBQSxHQUFBLEVBQUssSUFBSSxjQUFKLENBQVE7SUFBQSxNQUFBLEVBQVE7RUFBUixDQUFSO0FBQUwsQ0FBQTtBQUVGLE9BQUEsQ0FBQSxjQUFBLEdBQUEsY0FBQSxHQUFpQixlQUFBLENBQUMsTUFBRCxFQUFBO1NBQVksQ0FBQSxNQUFBLGdCQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsSUFBQTtBQUFaLENBQUE7QUFFakIsT0FBQSxDQUFBLGNBQUEsR0FBQSxjQUFBLEdBQWlCLGVBQUEsQ0FBQyxNQUFELEVBQUE7RUFDakIsSUFBQSxXQUFBLEVBQUEsY0FBQSxFQUFBLHNCQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUE7RUFBRSxDQUFBO0lBQUU7RUFBRixDQUFBLEdBQTZCLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBUixDQUNqQztJQUFBLG1CQUFBLEVBQXFCLENBQUUsUUFBRjtFQUFyQixDQUQyQixDQUE3QjtFQUVBLEtBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsc0JBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTtLQUFJO01BQUU7SUFBRixDQUFBLEdBQUEsc0JBQUEsQ0FBQSxDQUFBLENBQUE7SUFDRixDQUFBO01BQUU7SUFBRixDQUFBLEdBQWtCLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBUixDQUE0QjtNQUFFO0lBQUYsQ0FBbEMsQ0FBbEI7SUFDQSxJQUFBLE9BQUEsQ0FBQSxJQUFBLENBQWEsV0FBVyxDQUFDLHVCQUFBLEVBQXRCLE1BQUEsQ0FBQSxJQUFBLENBQUgsRUFBQTtNQUNFLE9BQ0U7UUFBQSxDQUFBLEVBQUcsV0FBSDtRQUNBLEdBQUEsRUFBSztNQURMLENBRko7O0VBRkY7U0FNQSxLQUFBLENBQUE7QUFUZSxDQUFBO0FBV2pCLE9BQUEsQ0FBQSxpQkFBQSxHQUFBLGlCQUFBLEdBQW9CLGVBQUEsQ0FBQyxNQUFELEVBQUE7U0FBWSxDQUFFLE1BQU0sY0FBQSxDQUFlLE1BQWYsQ0FBUixFQUFnQyxHQUFBO0FBQTVDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQ00gfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWFjbVwiXG5cbkFXUyA9XG4gIEFDTTogbmV3IEFDTSByZWdpb246IFwidXMtZWFzdC0xXCJcbiAgXG5oYXNDZXJ0aWZpY2F0ZSA9IChkb21haW4pIC0+IChhd2FpdCBnZXRDZXJ0aWZpY2F0aW9uIGRvbWFpbik/XG5cbmdldENlcnRpZmljYXRlID0gKGRvbWFpbikgLT5cbiAgeyBDZXJ0aWZpY2F0ZVN1bW1hcnlMaXN0IH0gPSBhd2FpdCBBV1MuQUNNLmxpc3RDZXJ0aWZpY2F0ZXNcbiAgICBDZXJ0aWZpY2F0ZVN0YXR1c2VzOiBbIFwiSVNTVUVEXCIgXVxuICBmb3IgeyBDZXJ0aWZpY2F0ZUFybiB9IGluIENlcnRpZmljYXRlU3VtbWFyeUxpc3RcbiAgICB7IENlcnRpZmljYXRlIH0gPSBhd2FpdCBBV1MuQUNNLmRlc2NyaWJlQ2VydGlmaWNhdGUgeyBDZXJ0aWZpY2F0ZUFybiB9XG4gICAgaWYgZG9tYWluIGluIENlcnRpZmljYXRlLlN1YmplY3RBbHRlcm5hdGl2ZU5hbWVzXG4gICAgICByZXR1cm4gXG4gICAgICAgIF86IENlcnRpZmljYXRlXG4gICAgICAgIGFybjogQ2VydGlmaWNhdGVBcm5cbiAgdW5kZWZpbmVkICBcblxuZ2V0Q2VydGlmaWNhdGVBUk4gPSAoZG9tYWluKSAtPiAoIGF3YWl0IGdldENlcnRpZmljYXRlIGRvbWFpbiApLmFyblxuXG5leHBvcnQge1xuICBoYXNDZXJ0aWZpY2F0ZVxuICBnZXRDZXJ0aWZpY2F0ZVxuICBnZXRDZXJ0aWZpY2F0ZUFSTlxufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/acm.coffee