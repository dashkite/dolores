"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForReady = exports.versionLambda = exports.syncInvokeLambda = exports.putSources = exports.publishLambda = exports.listSources = exports.invokeLambda = exports.hasLambda = exports.getLatestLambdaARN = exports.getLatestLambda = exports.getLambdaVersion = exports.getLambdaUnqualifiedARN = exports.getLambdaARN = exports.getLambda = exports.deleteSources = exports.deleteSource = exports.deleteLambda = exports.createSources = exports.createSource = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var Lambda = _interopRequireWildcard(require("@aws-sdk/client-lambda"));
var S3 = _interopRequireWildcard(require("@aws-sdk/client-s3"));
var Text = _interopRequireWildcard(require("@dashkite/joy/text"));
var Time = _interopRequireWildcard(require("@dashkite/joy/time"));
var _helpers = require("./helpers.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AWS, _createSource, _invokeLambda, createSource, createSources, defaults, deleteLambda, deleteSource, deleteSources, getLambda, getLambdaARN, getLambdaUnqualifiedARN, getLambdaVersion, getLatestLambda, getLatestLambdaARN, hasLambda, invokeLambda, listSources, md5, publishLambda, putSources, syncInvokeLambda, versionLambda, waitForReady;
exports.waitForReady = waitForReady;
exports.versionLambda = versionLambda;
exports.syncInvokeLambda = syncInvokeLambda;
exports.putSources = putSources;
exports.publishLambda = publishLambda;
exports.listSources = listSources;
exports.invokeLambda = invokeLambda;
exports.hasLambda = hasLambda;
exports.getLatestLambdaARN = getLatestLambdaARN;
exports.getLatestLambda = getLatestLambda;
exports.getLambdaVersion = getLambdaVersion;
exports.getLambdaUnqualifiedARN = getLambdaUnqualifiedARN;
exports.getLambdaARN = getLambdaARN;
exports.getLambda = getLambda;
exports.deleteSources = deleteSources;
exports.deleteSource = deleteSource;
exports.deleteLambda = deleteLambda;
exports.createSources = createSources;
exports.createSource = createSource;
AWS = {
  Lambda: (0, _helpers.lift)(Lambda),
  S3: (0, _helpers.lift)(S3)
};
md5 = function (buffer) {
  return _crypto.default.createHash('md5').update(buffer).digest("base64");
};
exports.hasLambda = hasLambda = async function (name) {
  return (await getLambda(name)) != null;
};
exports.getLambda = getLambda = async function (name) {
  var error, lambda;
  try {
    lambda = await AWS.Lambda.getFunction({
      FunctionName: name
    });
    return {
      _: lambda,
      arn: lambda.Configuration.FunctionArn,
      state: lambda.Configuration.State,
      lastStatus: lambda.Configuration.LastUpdateStatus
    };
  } catch (error1) {
    error = error1;
    if (/ResourceNotFoundException/.test(error.toString())) {
      return void 0;
    } else {
      throw error;
    }
  }
};

// AWS added internal state management to Lambda in an effort to improve the performance
// of the invocation cycle. This is a broad helper to wait until the lambda is ready
// to go and accept more changes to its state.
exports.waitForReady = waitForReady = async function (name) {
  var lastStatus, results1, state;
  results1 = [];
  while (true) {
    ({
      state,
      lastStatus
    } = await getLambda(name));
    if (state === "Active" && lastStatus === "Successful") {
      break;
    } else if (state === "Failed") {
      throw new Error(`Lambda [ ${name} ] State is Failed.`);
    } else if (lastStatus === "Failed") {
      throw new Error(`Lambda [ ${name} ] LastUpdateStatus is Failed.`);
    } else {
      results1.push(await Time.sleep(1000));
    }
  }
  return results1;
};
exports.getLambdaVersion = getLambdaVersion = async function (name, version) {
  var Versions, current, i, len;
  ({
    Versions
  } = await AWS.Lambda.listVersionsByFunction({
    FunctionName: name
  }));
  for (i = 0, len = Versions.length; i < len; i++) {
    current = Versions[i];
    if (version === Text.parseNumber(current.Version)) {
      return {
        _: current,
        arn: current.FunctionArn,
        version: Text.parseNumber(currentVersion)
      };
    }
  }
  return void 0;
};
exports.getLatestLambda = getLatestLambda = async function (name) {
  var Versions, current, i, len, max, result, version;
  ({
    Versions
  } = await AWS.Lambda.listVersionsByFunction({
    FunctionName: name
  }));
  result = void 0;
  max = 0;
  for (i = 0, len = Versions.length; i < len; i++) {
    current = Versions[i];
    if (current.Version !== "$LATEST") {
      version = Text.parseNumber(current.Version);
      if (version >= max) {
        max = version;
        result = current;
      }
    } else {
      result = current;
    }
  }
  if (result != null) {
    return {
      _: result,
      arn: result.FunctionArn,
      version: max
    };
  }
};
exports.getLatestLambdaARN = getLatestLambdaARN = async function (name) {
  return (await getLatestLambda(name)).arn;
};
exports.getLambdaARN = getLambdaARN = getLatestLambdaARN;
exports.getLambdaUnqualifiedARN = getLambdaUnqualifiedARN = async function (name) {
  return (await getLambdaARN(name)).split(":").slice(0, -1).join(":");
};
defaults = {
  bucket: "dolores.dashkite.com",
  role: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
  memory: 128,
  // max size for edge lambdas
  timeout: 5,
  // max timeout for edge lambdas
  handler: "build/lambda/index.handler",
  runtime: "nodejs18.x"
};
exports.publishLambda = publishLambda = async function (name, data, configuration) {
  var _configuration, bucket, environment, handler, memory, role, runtime, timeout;
  ({
    role,
    handler,
    runtime,
    bucket,
    memory,
    timeout,
    environment
  } = {
    ...defaults,
    ...configuration
  });
  _configuration = {
    FunctionName: name,
    Handler: handler,
    Runtime: runtime,
    MemorySize: memory,
    Timeout: timeout,
    TracingConfig: {
      Mode: "PassThrough"
    },
    Role: role
  };
  // if environment?
  //   _configuration.Environment = Variables: environment
  if (await hasLambda(name)) {
    await AWS.Lambda.updateFunctionCode({
      FunctionName: name,
      Publish: false,
      ZipFile: data
    });
    await waitForReady(name);
    await AWS.Lambda.updateFunctionConfiguration(_configuration);
    return waitForReady(name);
  } else {
    await AWS.Lambda.createFunction({
      ..._configuration,
      Code: {
        ZipFile: data
      }
    });
    return waitForReady(name);
  }
};
exports.versionLambda = versionLambda = async function (name) {
  var result;
  result = await AWS.Lambda.publishVersion({
    FunctionName: name
  });
  return {
    _: result,
    arn: result.FunctionArn,
    version: Text.parseNumber(result.Version)
  };
};
exports.deleteLambda = deleteLambda = function (name) {
  return AWS.Lambda.deleteFunction({
    FunctionName: name
  });
};
_invokeLambda = function (name, sync, input) {
  var parameters;
  parameters = {
    FunctionName: name
  };
  parameters.InvocationType = sync ? "RequestResponse" : "Event";
  if (input != null) {
    parameters.Payload = JSON.stringify(input);
  }
  return AWS.Lambda.invoke(parameters);
};
exports.invokeLambda = invokeLambda = function (name, input) {
  return _invokeLambda(name, false, input);
};
exports.syncInvokeLambda = syncInvokeLambda = function (name, input) {
  return _invokeLambda(name, true, input);
};
exports.listSources = listSources = async function (name) {
  var EventSourceMappings, NextMarker, next, result, results;
  results = [];
  next = void 0;
  while (true) {
    result = await AWS.Lambda.listEventSourceMappings({
      FunctionName: name,
      Marker: next
    });
    ({
      EventSourceMappings,
      NextMarker
    } = result);
    next = NextMarker;
    results.push(...EventSourceMappings);
    if (next == null) {
      return results;
    }
  }
};
exports.deleteSource = deleteSource = async function (source) {
  return await AWS.Lambda.deleteEventSourceMapping({
    UUID: source.UUID
  });
};
exports.deleteSources = deleteSources = async function (name) {
  var i, len, results1, source, sources;
  sources = await listSources(name);
  results1 = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    results1.push(await deleteSource(source));
  }
  return results1;
};
_createSource = async function (source) {
  return await AWS.Lambda.createEventSourceMapping(source);
};
exports.createSource = createSource = async function (source, duration = 125) {
  try {
    return await _createSource(source);
  } catch (error1) {
    duration *= 2;
    await Time.sleep(duration);
    return await createSource(source, duration);
  }
};
exports.createSources = createSources = async function (sources) {
  var i, len, results1, source;
  results1 = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    results1.push(await createSource(source));
  }
  return results1;
};
exports.putSources = putSources = async function (name, sources) {
  await deleteSources(name);
  return await createSources(sources);
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/lambda.coffee