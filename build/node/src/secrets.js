"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSecret = exports.parseSecretName = exports.hasSecret = exports.getWildcardARN = exports.getSecretReference = exports.getSecretARN = exports.getSecret = exports.deleteSecret = void 0;
var _clientSecretsManager = require("@aws-sdk/client-secrets-manager");
var __getSecret, _createSecret, _deleteSecret, _getSecret, _updateSecret, deleteSecret, getSecret, getSecretARN, getSecretReference, getWildcardARN, hasSecret, manager, parseSecretName, region, secrets, setSecret;
exports.setSecret = setSecret;
exports.parseSecretName = parseSecretName;
exports.hasSecret = hasSecret;
exports.getWildcardARN = getWildcardARN;
exports.getSecretReference = getSecretReference;
exports.getSecretARN = getSecretARN;
exports.getSecret = getSecret;
exports.deleteSecret = deleteSecret;
region = "us-east-1";
manager = new _clientSecretsManager.SecretsManager({
  region
});
secrets = {};
exports.parseSecretName = parseSecretName = function (name) {
  if (name == null) {
    return [];
  }
  return name.split("/");
};
exports.hasSecret = hasSecret = async function (_name) {
  var error, name;
  [name] = parseSecretName(_name);
  try {
    await manager.describeSecret({
      SecretId: name
    });
    return true;
  } catch (error1) {
    error = error1;
    if (/ResourceNotFoundException/.test(error.toString())) {
      return false;
    } else {
      throw error;
    }
  }
};
__getSecret = async function (_name) {
  var _error, bundle, error, name, secret, subName;
  [name, subName] = parseSecretName(_name);
  secret = await manager.getSecretValue({
    SecretId: name
  });
  if (subName != null) {
    secret = {
      ...secret
    };
    try {
      bundle = JSON.parse(secret.SecretString);
    } catch (error1) {
      _error = error1;
      error = new Error(`Unable to parse JSON for secrets bundle [ ${name} ], using reference [ ${_name} ]`);
      error._error = _error;
      throw error;
    }
    secret.SecretString = bundle != null ? bundle[subName] : void 0;
  }
  return secret;
};

// TODO replace this primitive expiry mechanism with a means to message lambdas?
// and/or we can use worker message queues...
_getSecret = async function (name) {
  var secret;
  if ((secret = secrets[name]) == null || Date.now() > secret.expires) {
    secret = {
      value: await __getSecret(name),
      expires: Date.now() + 60000
    };
    secrets[name] = secret;
  }
  return secret.value;
};
exports.getSecret = getSecret = async function (name) {
  var SecretString;
  ({
    SecretString
  } = await _getSecret(name));
  return SecretString;
};
exports.getSecretARN = getSecretARN = async function (name) {
  var ARN;
  ({
    ARN
  } = await _getSecret(name));
  return ARN;
};
exports.getWildcardARN = getWildcardARN = function (name) {
  return `arn:aws:secretsmanager:${region}:*:secret:${name}`;
};
exports.getSecretReference = getSecretReference = async function (name) {
  var VersionId;
  ({
    VersionId
  } = await _getSecret(name));
  return `{{resolve:secretsmanager:${name}:SecretString:::${VersionId}}}`;
};
_updateSecret = async function (_name, _value) {
  var name, subName, value;
  [name, subName] = parseSecretName(_name);
  if (subName != null) {
    value = JSON.parse(await getSecret(name));
    value[subName] = _value;
    value = JSON.stringify(value);
    return await manager.updateSecret({
      SecretId: name,
      SecretString: value
    });
  } else {
    return await manager.updateSecret({
      SecretId: name,
      SecretString: _value
    });
  }
};
_createSecret = async function (_name, _value) {
  var name, subName, value;
  [name, subName] = parseSecretName(_name);
  if (subName != null) {
    value = JSON.stringify({
      [subName]: _value
    });
    return await manager.createSecret({
      Name: name,
      SecretString: value
    });
  } else {
    return await manager.createSecret({
      Name: name,
      SecretString: _value
    });
  }
};
exports.setSecret = setSecret = async function (name, value) {
  var _value;
  if (await hasSecret(name)) {
    _value = await _updateSecret(name, value);
  } else {
    _value = await _createSecret(name, value);
  }
  return secrets[name] = {
    value: _value,
    expires: Date.now() + 60000
  };
};
_deleteSecret = async function (_name) {
  var name, subName, value;
  [name, subName] = parseSecretName(_name);
  if (subName != null) {
    value = JSON.parse(await getSecret(name));
    delete value[subName];
    value = JSON.stringify(value);
    return await setSecret(name, value);
  } else {
    return await manager.deleteSecret({
      SecretId: name,
      ForceDeleteWithoutRecovery: true
    });
  }
};
exports.deleteSecret = deleteSecret = async function (name) {
  await _deleteSecret(name);
  return delete secrets[name];
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/secrets.coffee