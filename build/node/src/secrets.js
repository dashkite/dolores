"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSecret = exports.parseSecretName = exports.hasSecret = exports.getWildcardARN = exports.getSecretReference = exports.getSecretARN = exports.getSecret = exports.deleteSecret = void 0;

var _clientSecretsManager = require("@aws-sdk/client-secrets-manager");

var __getSecret, _createSecret, _deleteSecret, _getSecret, _updateSecret, deleteSecret, getSecret, getSecretARN, getSecretReference, getWildcardARN, hasSecret, manager, parseSecretName, region, secrets, setSecret;

exports.setSecret = setSecret;
exports.parseSecretName = parseSecretName;
exports.hasSecret = hasSecret;
exports.getWildcardARN = getWildcardARN;
exports.getSecretReference = getSecretReference;
exports.getSecretARN = getSecretARN;
exports.getSecret = getSecret;
exports.deleteSecret = deleteSecret;
region = "us-east-1";
manager = new _clientSecretsManager.SecretsManager({
  region
});
secrets = {};

exports.parseSecretName = parseSecretName = function (name) {
  if (name == null) {
    return [];
  }

  return name.split("/");
};

exports.hasSecret = hasSecret = async function (_name) {
  var error, name;
  [name] = parseSecretName(_name);

  try {
    await manager.describeSecret({
      SecretId: name
    });
    return true;
  } catch (error1) {
    error = error1;

    if (/ResourceNotFoundException/.test(error.toString())) {
      return false;
    } else {
      throw error;
    }
  }
};

__getSecret = async function (_name) {
  var _error, bundle, error, name, secret, subName;

  [name, subName] = parseSecretName(_name);
  secret = await manager.getSecretValue({
    SecretId: name
  });

  if (subName != null) {
    secret = { ...secret
    };

    try {
      bundle = JSON.parse(secret.SecretString);
    } catch (error1) {
      _error = error1;
      error = new Error(`Unable to parse JSON for secrets bundle [ ${name} ], using reference [ ${_name} ]`);
      error._error = _error;
      throw error;
    }

    secret.SecretString = bundle != null ? bundle[subName] : void 0;
  }

  return secret;
}; // TODO replace this primitive expiry mechanism with a means to message lambdas?
// and/or we can use worker message queues...


_getSecret = async function (name) {
  var secret;

  if ((secret = secrets[name]) == null || Date.now() > secret.expires) {
    secret = {
      value: await __getSecret(name),
      expires: Date.now() + 60000
    };
    secrets[name] = secret;
  }

  return secret.value;
};

exports.getSecret = getSecret = async function (name) {
  var SecretString;
  ({
    SecretString
  } = await _getSecret(name));
  return SecretString;
};

exports.getSecretARN = getSecretARN = async function (name) {
  var ARN;
  ({
    ARN
  } = await _getSecret(name));
  return ARN;
};

exports.getWildcardARN = getWildcardARN = function (name) {
  return `arn:aws:secretsmanager:${region}:*:secret:${name}`;
};

exports.getSecretReference = getSecretReference = async function (name) {
  var VersionId;
  ({
    VersionId
  } = await _getSecret(name));
  return `{{resolve:secretsmanager:${name}:SecretString:::${VersionId}}}`;
};

_updateSecret = async function (_name, _value) {
  var name, subName, value;
  [name, subName] = parseSecretName(_name);

  if (subName != null) {
    value = JSON.parse(await getSecret(name));
    value[subName] = _value;
    value = JSON.stringify(value);
    return await manager.updateSecret({
      SecretId: name,
      SecretString: value
    });
  } else {
    return await manager.updateSecret({
      SecretId: name,
      SecretString: _value
    });
  }
};

_createSecret = async function (_name, _value) {
  var name, subName, value;
  [name, subName] = parseSecretName(_name);

  if (subName != null) {
    value = JSON.stringify({
      [subName]: _value
    });
    return await manager.createSecret({
      Name: name,
      SecretString: value
    });
  } else {
    return await manager.createSecret({
      Name: name,
      SecretString: _value
    });
  }
};

exports.setSecret = setSecret = async function (name, value) {
  var _value;

  if (await hasSecret(name)) {
    _value = await _updateSecret(name, value);
  } else {
    _value = await _createSecret(name, value);
  }

  return secrets[name] = {
    value: _value,
    expires: Date.now() + 60000
  };
};

_deleteSecret = async function (_name) {
  var name, subName, value;
  [name, subName] = parseSecretName(_name);

  if (subName != null) {
    value = JSON.parse(await getSecret(name));
    delete value[subName];
    value = JSON.stringify(value);
    return await setSecret(name, value);
  } else {
    return await manager.deleteSecret({
      SecretId: name,
      ForceDeleteWithoutRecovery: true
    });
  }
};

exports.deleteSecret = deleteSecret = async function (name) {
  await _deleteSecret(name);
  return delete secrets[name];
};
//# sourceMappingURL=data:application/json;base64,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LE9BQU8sQ0FBUCxJQUFPLENBQVAsR0FDRTtBQUFBLElBQUEsS0FBQSxFQUFBLE1BQUE7QUFDQSxJQUFBLE9BQUEsRUFBUyxJQUFJLENBQUosR0FBQSxLQUFhO0FBRHRCLEc7QUFQUSxDQUFaOztBQVVBLGFBQUEsR0FBZ0IsZ0JBQUEsS0FBQSxFQUFBO0FBQ2hCLE1BQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBO0FBQUUsR0FBQSxJQUFBLEVBQUEsT0FBQSxJQUFvQixlQUFBLENBQUEsS0FBQSxDQUFwQjs7QUFDQSxNQUFHLE9BQUEsSUFBSCxJQUFBLEVBQUE7QUFDRSxJQUFBLEtBQUEsR0FBUSxJQUFJLENBQUosS0FBQSxDQUFXLE1BQU0sU0FBQSxDQUFqQixJQUFpQixDQUFqQixDQUFSO0FBQ0EsV0FBTyxLQUFLLENBQUEsT0FBQSxDQUFaO0FBQ0EsSUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFKLFNBQUEsQ0FBQSxLQUFBLENBQVI7QUFDQSxXQUFBLE1BQU0sU0FBQSxDQUFBLElBQUEsRUFKUixLQUlRLENBQU47QUFKRixHQUFBLE1BQUE7QUFNRSxXQUFBLE1BQU0sT0FBTyxDQUFQLFlBQUEsQ0FDSjtBQUFBLE1BQUEsUUFBQSxFQUFBLElBQUE7QUFDQSxNQUFBLDBCQUFBLEVBQTRCO0FBRDVCLEtBREksQ0FBTjs7QUFSWSxDQUFoQjs7QUFZQSx1QkFBQSxZQUFBLEdBQWUsZ0JBQUEsSUFBQSxFQUFBO0FBQ2IsUUFBTSxhQUFBLENBQUEsSUFBQSxDQUFOO1NBQ0EsT0FBTyxPQUFPLENBQUEsSUFBQSxDO0FBRkQsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlY3JldHNNYW5hZ2VyIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zZWNyZXRzLW1hbmFnZXJcIlxuXG5yZWdpb24gPSAgXCJ1cy1lYXN0LTFcIlxubWFuYWdlciA9IG5ldyBTZWNyZXRzTWFuYWdlciB7IHJlZ2lvbiB9XG5zZWNyZXRzID0ge31cblxucGFyc2VTZWNyZXROYW1lID0gKG5hbWUpIC0+XG4gIHJldHVybiBbXSBpZiAhbmFtZT9cbiAgbmFtZS5zcGxpdCBcIi9cIlxuXG5oYXNTZWNyZXQgPSAoX25hbWUpIC0+XG4gIFsgbmFtZSBdID0gcGFyc2VTZWNyZXROYW1lIF9uYW1lXG5cbiAgdHJ5XG4gICAgYXdhaXQgbWFuYWdlci5kZXNjcmliZVNlY3JldCBTZWNyZXRJZDogbmFtZVxuICAgIHRydWVcbiAgY2F0Y2ggZXJyb3JcbiAgICBpZiAvUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbi8udGVzdCBlcnJvci50b1N0cmluZygpXG4gICAgICBmYWxzZVxuICAgIGVsc2VcbiAgICAgIHRocm93IGVycm9yXG5cbl9fZ2V0U2VjcmV0ID0gKF9uYW1lKSAtPlxuICBbIG5hbWUsIHN1Yk5hbWUgXSA9IHBhcnNlU2VjcmV0TmFtZSBfbmFtZVxuICBzZWNyZXQgPSBhd2FpdCBtYW5hZ2VyLmdldFNlY3JldFZhbHVlIFNlY3JldElkOiBuYW1lXG4gIGlmIHN1Yk5hbWU/IFxuICAgIHNlY3JldCA9IHsgc2VjcmV0Li4uIH1cbiAgICB0cnlcbiAgICAgIGJ1bmRsZSA9IEpTT04ucGFyc2Ugc2VjcmV0LlNlY3JldFN0cmluZ1xuICAgIGNhdGNoIF9lcnJvclxuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IgXCJVbmFibGUgdG8gcGFyc2UgSlNPTiBmb3Igc2VjcmV0cyBidW5kbGUgWyAje25hbWV9IF0sXG4gICAgICAgIHVzaW5nIHJlZmVyZW5jZSBbICN7X25hbWV9IF1cIlxuICAgICAgZXJyb3IuX2Vycm9yID0gX2Vycm9yXG4gICAgICB0aHJvdyBlcnJvclxuICAgIHNlY3JldC5TZWNyZXRTdHJpbmcgPSBidW5kbGU/W3N1Yk5hbWVdXG4gIHNlY3JldFxuXG4jIFRPRE8gcmVwbGFjZSB0aGlzIHByaW1pdGl2ZSBleHBpcnkgbWVjaGFuaXNtIHdpdGggYSBtZWFucyB0byBtZXNzYWdlIGxhbWJkYXM/XG4jIGFuZC9vciB3ZSBjYW4gdXNlIHdvcmtlciBtZXNzYWdlIHF1ZXVlcy4uLlxuX2dldFNlY3JldCA9IChuYW1lKSAtPlxuICBpZiAhKCBzZWNyZXQgPSBzZWNyZXRzW25hbWVdICk/IHx8ICggRGF0ZS5ub3coKSA+IHNlY3JldC5leHBpcmVzIClcbiAgICBzZWNyZXQgPVxuICAgICAgdmFsdWU6IGF3YWl0IF9fZ2V0U2VjcmV0IG5hbWVcbiAgICAgIGV4cGlyZXM6IERhdGUubm93KCkgKyA2MDAwMFxuICAgIHNlY3JldHNbIG5hbWUgXSA9IHNlY3JldFxuICBzZWNyZXQudmFsdWVcblxuZ2V0U2VjcmV0ID0gKG5hbWUpIC0+XG4gIHsgU2VjcmV0U3RyaW5nIH0gPSBhd2FpdCBfZ2V0U2VjcmV0IG5hbWVcbiAgU2VjcmV0U3RyaW5nXG5cbmdldFNlY3JldEFSTiA9IChuYW1lKSAtPlxuICB7IEFSTiB9ID0gYXdhaXQgX2dldFNlY3JldCBuYW1lXG4gIEFSTlxuXG5nZXRXaWxkY2FyZEFSTiA9IChuYW1lKSAtPiBcbiAgXCJhcm46YXdzOnNlY3JldHNtYW5hZ2VyOiN7cmVnaW9ufToqOnNlY3JldDoje25hbWV9XCJcblxuZ2V0U2VjcmV0UmVmZXJlbmNlID0gKG5hbWUpIC0+XG4gIHsgVmVyc2lvbklkIH0gPSBhd2FpdCBfZ2V0U2VjcmV0IG5hbWVcbiAgXCJ7e3Jlc29sdmU6c2VjcmV0c21hbmFnZXI6I3tuYW1lfTpTZWNyZXRTdHJpbmc6Ojoje1ZlcnNpb25JZH19fVwiXG5cbl91cGRhdGVTZWNyZXQgPSAoX25hbWUsIF92YWx1ZSkgLT5cbiAgWyBuYW1lLCBzdWJOYW1lIF0gPSBwYXJzZVNlY3JldE5hbWUgX25hbWVcbiAgaWYgc3ViTmFtZT9cbiAgICB2YWx1ZSA9IEpTT04ucGFyc2UgYXdhaXQgZ2V0U2VjcmV0IG5hbWVcbiAgICB2YWx1ZVsgc3ViTmFtZSBdID0gX3ZhbHVlXG4gICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSB2YWx1ZVxuICAgIGF3YWl0IG1hbmFnZXIudXBkYXRlU2VjcmV0IFNlY3JldElkOiBuYW1lLCBTZWNyZXRTdHJpbmc6IHZhbHVlXG4gIGVsc2VcbiAgICBhd2FpdCBtYW5hZ2VyLnVwZGF0ZVNlY3JldCBTZWNyZXRJZDogbmFtZSwgU2VjcmV0U3RyaW5nOiBfdmFsdWVcblxuX2NyZWF0ZVNlY3JldCA9IChfbmFtZSwgX3ZhbHVlKSAtPlxuICBbIG5hbWUsIHN1Yk5hbWUgXSA9IHBhcnNlU2VjcmV0TmFtZSBfbmFtZVxuICBpZiBzdWJOYW1lP1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkgWyBzdWJOYW1lIF06IF92YWx1ZVxuICAgIGF3YWl0IG1hbmFnZXIuY3JlYXRlU2VjcmV0IE5hbWU6IG5hbWUsIFNlY3JldFN0cmluZzogdmFsdWVcbiAgZWxzZVxuICAgIGF3YWl0IG1hbmFnZXIuY3JlYXRlU2VjcmV0IE5hbWU6IG5hbWUsIFNlY3JldFN0cmluZzogX3ZhbHVlXG5cbnNldFNlY3JldCA9IChuYW1lLCB2YWx1ZSkgLT5cbiAgaWYgYXdhaXQgaGFzU2VjcmV0IG5hbWVcbiAgICBfdmFsdWUgPSBhd2FpdCBfdXBkYXRlU2VjcmV0IG5hbWUsIHZhbHVlXG4gIGVsc2VcbiAgICBfdmFsdWUgPSBhd2FpdCBfY3JlYXRlU2VjcmV0IG5hbWUsIHZhbHVlXG4gIFxuICBzZWNyZXRzW25hbWVdID0gXG4gICAgdmFsdWU6IF92YWx1ZVxuICAgIGV4cGlyZXM6IERhdGUubm93KCkgKyA2MDAwMFxuXG5fZGVsZXRlU2VjcmV0ID0gKF9uYW1lKSAtPlxuICBbIG5hbWUsIHN1Yk5hbWUgXSA9IHBhcnNlU2VjcmV0TmFtZSBfbmFtZVxuICBpZiBzdWJOYW1lP1xuICAgIHZhbHVlID0gSlNPTi5wYXJzZSBhd2FpdCBnZXRTZWNyZXQgbmFtZVxuICAgIGRlbGV0ZSB2YWx1ZVsgc3ViTmFtZSBdXG4gICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSB2YWx1ZVxuICAgIGF3YWl0IHNldFNlY3JldCBuYW1lLCB2YWx1ZVxuICBlbHNlXG4gICAgYXdhaXQgbWFuYWdlci5kZWxldGVTZWNyZXRcbiAgICAgIFNlY3JldElkOiBuYW1lXG4gICAgICBGb3JjZURlbGV0ZVdpdGhvdXRSZWNvdmVyeTogdHJ1ZVxuXG5kZWxldGVTZWNyZXQgPSAobmFtZSkgLT5cbiAgYXdhaXQgX2RlbGV0ZVNlY3JldCBuYW1lXG4gIGRlbGV0ZSBzZWNyZXRzWyBuYW1lIF1cblxuZXhwb3J0IHtcbiAgcGFyc2VTZWNyZXROYW1lXG4gIGhhc1NlY3JldFxuICBnZXRTZWNyZXRcbiAgZ2V0U2VjcmV0QVJOXG4gIGdldFdpbGRjYXJkQVJOXG4gIGdldFNlY3JldFJlZmVyZW5jZVxuICBzZXRTZWNyZXRcbiAgZGVsZXRlU2VjcmV0XG59Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=src/secrets.coffee