"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.putQueue = exports.pushMessage = exports.popMessages = exports.getQueueURL = exports.getQueueARN = exports.emptyQueue = exports.deleteQueue = exports.createQueue = exports._createQueue = void 0;
var SQS = _interopRequireWildcard(require("@aws-sdk/client-sqs"));
var STS = _interopRequireWildcard(require("@aws-sdk/client-sts"));
var Obj = _interopRequireWildcard(require("@dashkite/joy/object"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _helpers = require("./helpers.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var AWS, _createQueue, _deleteMessage, _deleteMessages, _receieveMessages, cache, createQueue, createStepFunction, deleteQueue, emptyQueue, getQueueARN, getQueueURL, popMessages, pushMessage, putQueue, region;
exports.putQueue = putQueue;
exports.pushMessage = pushMessage;
exports.popMessages = popMessages;
exports.getQueueURL = getQueueURL;
exports.getQueueARN = getQueueARN;
exports.emptyQueue = emptyQueue;
exports.deleteQueue = deleteQueue;
exports.createQueue = createQueue;
exports._createQueue = _createQueue;
createStepFunction = function ({
  name,
  dictionary,
  resources,
  description
}) {};
cache = {
  account: null
};
AWS = {
  SQS: (0, _helpers.lift)(SQS),
  STS: (0, _helpers.lift)(STS)
};
region = "us-east-1";
exports.getQueueARN = getQueueARN = async function (name) {
  var account;
  account = await async function () {
    return cache.account != null ? cache.account : cache.account = (await AWS.STS.getCallerIdentity()).Account;
  }();
  return `arn:aws:sqs:${region}:${account}:${name}.fifo`;
};
exports._createQueue = _createQueue = function (name, options) {
  return AWS.SQS.createQueue({
    QueueName: name,
    Attributes: options
  });
};

// Dolores will be opinionated and always assume a FIFO queue.
exports.createQueue = createQueue = function (name, options = {}) {
  var defaults;
  name = `${name}.fifo`;
  defaults = {
    FifoQueue: true,
    ReceiveMessageWaitTimeSeconds: 20,
    ContentBasedDeduplication: true
  };
  return _createQueue(name, Obj.merge(defaults, options));
};

// Dolores will be opinionated and always assume a FIFO queue.
exports.getQueueURL = getQueueURL = async function (name) {
  var QueueUrl, error;
  name = `${name}.fifo`;
  try {
    ({
      QueueUrl
    } = await AWS.SQS.getQueueUrl({
      QueueName: name
    }));
    return QueueUrl;
  } catch (error1) {
    error = error1;
    if (/AWS\.SimpleQueueService\.NonExistentQueue/.test(error.toString())) {
      return null;
    } else {
      throw error;
    }
  }
};

// For now, this will be idempotent. Some aspects of queues cannot be updated
//   and require a delete-create cycle (~60s) to perform an effective update.
exports.putQueue = putQueue = async function (name, options) {
  if ((await getQueueURL(name)) == null) {
    return await createQueue(name, options);
  }
};

// AWS indicates this can take 60 seconds to complete.
exports.emptyQueue = emptyQueue = async function (name) {
  var url;
  if ((url = await getQueueURL(name)) != null) {
    return await AWS.SQS.purgeQueue({
      QueueUrl: url
    });
  }
};

// AWS indicates this can take 60 seconds to complete.
exports.deleteQueue = deleteQueue = async function (name) {
  var url;
  if ((url = await getQueueURL(name)) != null) {
    return await AWS.SQS.deleteQueue({
      QueueUrl: url
    });
  }
};
exports.pushMessage = pushMessage = async function (name, message, options) {
  var defaults, url;
  if (!Type.isString(message) || message.length === 0) {
    throw new Error("dolores:queue: message must be a string with minimum length 1.");
  }
  defaults = {
    MessageGroupId: "DefaultMessageGroupID"
  };
  if ((url = await getQueueURL(name)) != null) {
    return await AWS.SQS.sendMessage(Obj.merge(defaults, options, {
      MessageBody: message,
      QueueUrl: url
    }));
  } else {
    throw new Error(`dolores:queue: the queue ${name} is not available`);
  }
};
_receieveMessages = async function (url, options) {
  var Messages, defaults;
  defaults = {
    AttributeNames: ["All"],
    MessageAttributeNames: ["All"]
  };
  ({
    Messages
  } = await AWS.SQS.receiveMessage(Obj.merge(defaults, options, {
    QueueUrl: url
  })));
  return Messages;
};
_deleteMessage = function (url, handle) {
  return AWS.SQS.deleteMessage({
    QueueUrl: url,
    ReceiptHandle: handle
  });
};
_deleteMessages = function (url, handles) {
  return AWS.SQS.deleteMessageBatch({
    QueueUrl: url,
    Entries: function () {
      var handle, i, index, len, results;
      results = [];
      for (index = i = 0, len = handles.length; i < len; index = ++i) {
        handle = handles[index];
        results.push({
          Id: `${index}`,
          ReceiptHandle: handle
        });
      }
      return results;
    }()
  });
};
exports.popMessages = popMessages = async function (name, options) {
  var Body, ReceiptHandle, _messages, handles, i, len, messages, url;
  if ((url = await getQueueURL(name)) != null) {
    _messages = await _receieveMessages(url, options);
    if (_messages == null) {
      _messages = [];
    }
    handles = [];
    messages = [];
    for (i = 0, len = _messages.length; i < len; i++) {
      ({
        ReceiptHandle,
        Body
      } = _messages[i]);
      handles.push(ReceiptHandle);
      messages.push(Body);
    }
    if (handles.length > 0) {
      await _deleteMessages(url, handles);
    }
    return messages;
  } else {
    throw new Error(`dolores:queue: the queue ${name} is not available`);
  }
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/queue.coffee