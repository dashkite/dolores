"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runNetwork = exports.partition = exports.lift = void 0;
var lift, partition, runNetwork, turn;
exports.runNetwork = runNetwork;
exports.partition = partition;
exports.lift = lift;

exports.lift = lift = function (M, options) {
  var N, client, key, name, proxy, value;

  if (options == null) {
    options = {
      region: "us-east-1"
    };
  }

  client = void 0;

  proxy = function (command) {
    return function (parameters = {}) {
      return client.send(new command(parameters));
    };
  };

  N = {};

  for (key in M) {
    value = M[key];

    if (key.endsWith("Command")) {
      name = key.replace(/Command$/, "").replace(/^[A-Z]/, function (c) {
        return c.toLowerCase();
      });
      N[name] = proxy(value);
    } else if (key.endsWith("Client")) {
      client = new value(options);
    }
  }

  return N;
};

turn = async function (nodes, state, context) {
  var base, error, j, len, node, original;

  for (j = 0, len = nodes.length; j < len; j++) {
    node = nodes[j];

    if (node.pattern === state.name || (typeof (base = node.pattern).test === "function" ? base.test(state.name) : void 0)) {
      if (node.action != null) {
        await node.action(context, state);
      }

      if (node.result != null) {
        state.result = await node.result(context, state);
      } else if (node.next != null) {
        original = state.name;
        state.name = await node.next(context, state);
        console.log(`${original} -> ${state.name}`);

        if (node.nodes != null) {
          try {
            await turn(node.nodes, state, context);
          } catch (error1) {
            error = error1;

            if (!/^Unknown state/.test(error.message)) {
              throw error;
            }
          }
        }
      }

      return void 0;
    }
  } // if we get here, no nodes matched, which is a bad state


  throw new Error(`Unknown state [ ${state.name} ]`);
};

exports.runNetwork = runNetwork = async function (nodes, state, context) {
  while (true) {
    await turn(nodes, state, context);

    if (state.result != null) {
      return state.result;
    }
  }
}; // From joy's partition.


exports.partition = partition = function* (n, i) {
  var batch, x;
  batch = [];

  for (x of i) {
    batch.push(x);

    if (batch.length === n) {
      yield batch;
      batch = [];
    }
  }

  if (batch.length > 0) {
    return yield batch;
  }
};
//# sourceMappingURL=data:application/json;base64,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QSxLQUFBLEVBRFIsT0FDUSxDQUFOO0FBQ0YsV0FGQSxDQUVBLE9BQUEsTUFBQSxFQUFBO0FBQU0sWUFBQSxLQUFBLEdBQUEsTUFBQTs7QUFDSixnQkFBRyxDQUFFLGlCQUFBLElBQUEsQ0FBc0IsS0FBSyxDQUFoQyxPQUFLLENBQUwsRUFBQTtBQUNFLG9CQURGLEtBQ0U7QUFGSjtBQUhGO0FBSkc7OztBQVVMLGFBQU8sS0FmVCxDQWVFOztBQWhCTixHQURPLEM7OztBQW1CTCxRQUFNLElBQUEsS0FBQSxDQUFVLG1CQUFtQixLQUFLLENBQXhCLElBQVYsSUFBQSxDQUFOO0FBbkJLLENBQVA7O0FBcUJBLHFCQUFBLFVBQUEsR0FBYSxnQkFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQTtBQUNYLFNBQUEsSUFBQSxFQUFBO0FBQ0UsVUFBTSxJQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLENBQU47O0FBQ0EsUUFBRyxLQUFBLENBQUEsTUFBQSxJQUFILElBQUEsRUFBQTtBQUNFLGFBQU8sS0FBSyxDQURkLE1BQ0U7O0FBSEo7QUF6Q0YsQ0F3Q0EsQzs7O0FBT0Esb0JBQUEsU0FBQSxHQUFZLFdBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtBQUNaLE1BQUEsS0FBQSxFQUFBLENBQUE7QUFBRSxFQUFBLEtBQUEsR0FBUSxFQUFSOztBQUNBLE9BQUEsQ0FBQSxJQUFBLENBQUEsRUFBQTtBQUNFLElBQUEsS0FBSyxDQUFMLElBQUEsQ0FBQSxDQUFBOztBQUNBLFFBQUcsS0FBSyxDQUFMLE1BQUEsS0FBSCxDQUFBLEVBQUE7QUFDRSxZQUFNLEtBQU47QUFDQSxNQUFBLEtBQUEsR0FGRixFQUVFOztBQUpKOztBQUtBLE1BQUcsS0FBSyxDQUFMLE1BQUEsR0FBSCxDQUFBLEVBQUE7QUFDRSxXQUFBLE1BREYsS0FDRTs7QUFSUSxDQUFaIiwic291cmNlc0NvbnRlbnQiOlsibGlmdCA9IChNLCBvcHRpb25zKSAtPlxuXG4gIG9wdGlvbnMgPz0gcmVnaW9uOiBcInVzLWVhc3QtMVwiXG4gIGNsaWVudCA9IHVuZGVmaW5lZFxuXG4gIHByb3h5ID0gKCBjb21tYW5kICkgLT4gXG4gICAgKCBwYXJhbWV0ZXJzID0ge30gKSAtPiBjbGllbnQuc2VuZCBuZXcgY29tbWFuZCBwYXJhbWV0ZXJzXG5cbiAgTiA9IHt9XG4gIGZvciBrZXksIHZhbHVlIG9mIE1cbiAgICBpZiBrZXkuZW5kc1dpdGggXCJDb21tYW5kXCJcbiAgICAgIG5hbWUgPSBrZXlcbiAgICAgICAgLnJlcGxhY2UgL0NvbW1hbmQkLywgXCJcIlxuICAgICAgICAucmVwbGFjZSAvXltBLVpdLywgKGMpIC0+IGMudG9Mb3dlckNhc2UoKVxuICAgICAgTlsgbmFtZSBdID0gcHJveHkgdmFsdWVcbiAgICBlbHNlIGlmIGtleS5lbmRzV2l0aCBcIkNsaWVudFwiXG4gICAgICBjbGllbnQgPSBuZXcgdmFsdWUgb3B0aW9uc1xuICBOXG5cbnR1cm4gPSAobm9kZXMsIHN0YXRlLCBjb250ZXh0KSAtPlxuICBmb3Igbm9kZSBpbiBub2Rlc1xuICAgIGlmIG5vZGUucGF0dGVybiA9PSBzdGF0ZS5uYW1lIHx8IG5vZGUucGF0dGVybi50ZXN0PyBzdGF0ZS5uYW1lXG4gICAgICBpZiBub2RlLmFjdGlvbj9cbiAgICAgICAgYXdhaXQgbm9kZS5hY3Rpb24gY29udGV4dCwgc3RhdGVcbiAgICAgIGlmIG5vZGUucmVzdWx0P1xuICAgICAgICBzdGF0ZS5yZXN1bHQgPSBhd2FpdCBub2RlLnJlc3VsdCBjb250ZXh0LCBzdGF0ZVxuICAgICAgZWxzZSBpZiBub2RlLm5leHQ/XG4gICAgICAgIG9yaWdpbmFsID0gc3RhdGUubmFtZVxuICAgICAgICBzdGF0ZS5uYW1lID0gYXdhaXQgbm9kZS5uZXh0IGNvbnRleHQsIHN0YXRlXG4gICAgICAgIGNvbnNvbGUubG9nIFwiI3tvcmlnaW5hbH0gLT4gI3tzdGF0ZS5uYW1lfVwiXG4gICAgICAgIGlmIG5vZGUubm9kZXM/XG4gICAgICAgICAgdHJ5XG4gICAgICAgICAgICBhd2FpdCB0dXJuIG5vZGUubm9kZXMsIHN0YXRlLCBjb250ZXh0XG4gICAgICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgICAgIGlmICEgL15Vbmtub3duIHN0YXRlLy50ZXN0IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgIyBpZiB3ZSBnZXQgaGVyZSwgbm8gbm9kZXMgbWF0Y2hlZCwgd2hpY2ggaXMgYSBiYWQgc3RhdGVcbiAgdGhyb3cgbmV3IEVycm9yIFwiVW5rbm93biBzdGF0ZSBbICN7c3RhdGUubmFtZX0gXVwiXG5cbnJ1bk5ldHdvcmsgPSAobm9kZXMsIHN0YXRlLCBjb250ZXh0KSAtPlxuICBsb29wXG4gICAgYXdhaXQgdHVybiBub2Rlcywgc3RhdGUsIGNvbnRleHRcbiAgICBpZiBzdGF0ZS5yZXN1bHQ/XG4gICAgICByZXR1cm4gc3RhdGUucmVzdWx0XG5cbiMgRnJvbSBqb3kncyBwYXJ0aXRpb24uXG5wYXJ0aXRpb24gPSAobiwgaSkgLT5cbiAgYmF0Y2ggPSBbXVxuICBmb3IgeCBmcm9tIGlcbiAgICBiYXRjaC5wdXNoIHhcbiAgICBpZiBiYXRjaC5sZW5ndGggPT0gblxuICAgICAgeWllbGQgYmF0Y2hcbiAgICAgIGJhdGNoID0gW11cbiAgaWYgYmF0Y2gubGVuZ3RoID4gMFxuICAgIHlpZWxkIGJhdGNoXG5cbmV4cG9ydCB7XG4gIGxpZnRcbiAgcnVuTmV0d29ya1xuICBwYXJ0aXRpb25cbn0iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=src/helpers.coffee