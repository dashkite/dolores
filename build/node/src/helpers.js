"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runNetwork = exports.partition = exports.lift = void 0;
var lift, partition, runNetwork, turn;
exports.runNetwork = runNetwork;
exports.partition = partition;
exports.lift = lift;
exports.lift = lift = function (M, options) {
  var N, client, key, name, proxy, value;
  if (options == null) {
    options = {
      region: "us-east-1"
    };
  }
  client = void 0;
  proxy = function (command) {
    return function (parameters = {}) {
      return client.send(new command(parameters));
    };
  };
  N = {};
  for (key in M) {
    value = M[key];
    if (key.endsWith("Command")) {
      name = key.replace(/Command$/, "").replace(/^[A-Z]/, function (c) {
        return c.toLowerCase();
      });
      N[name] = proxy(value);
    } else if (key.endsWith("Client")) {
      client = new value(options);
    }
  }
  return N;
};
turn = async function (nodes, state, context) {
  var base, error, j, len, node, original;
  for (j = 0, len = nodes.length; j < len; j++) {
    node = nodes[j];
    if (node.pattern === state.name || (typeof (base = node.pattern).test === "function" ? base.test(state.name) : void 0)) {
      if (node.action != null) {
        await node.action(context, state);
      }
      if (node.result != null) {
        state.result = await node.result(context, state);
      } else if (node.next != null) {
        original = state.name;
        state.name = await node.next(context, state);
        console.log(`${original} -> ${state.name}`);
        if (node.nodes != null) {
          try {
            await turn(node.nodes, state, context);
          } catch (error1) {
            error = error1;
            if (!/^Unknown state/.test(error.message)) {
              throw error;
            }
          }
        }
      }
      return void 0;
    }
  }
  // if we get here, no nodes matched, which is a bad state
  throw new Error(`Unknown state [ ${state.name} ]`);
};
exports.runNetwork = runNetwork = async function (nodes, state, context) {
  while (true) {
    await turn(nodes, state, context);
    if (state.result != null) {
      return state.result;
    }
  }
};

// From joy's partition.
exports.partition = partition = function* (n, i) {
  var batch, x;
  batch = [];
  for (x of i) {
    batch.push(x);
    if (batch.length === n) {
      yield batch;
      batch = [];
    }
  }
  if (batch.length > 0) {
    return yield batch;
  }
};
//# sourceMappingURL=data:application/json;base64,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Q29udGVudCI6WyJsaWZ0ID0gKE0sIG9wdGlvbnMpIC0+XG5cbiAgb3B0aW9ucyA/PSByZWdpb246IFwidXMtZWFzdC0xXCJcbiAgY2xpZW50ID0gdW5kZWZpbmVkXG5cbiAgcHJveHkgPSAoIGNvbW1hbmQgKSAtPiBcbiAgICAoIHBhcmFtZXRlcnMgPSB7fSApIC0+IGNsaWVudC5zZW5kIG5ldyBjb21tYW5kIHBhcmFtZXRlcnNcblxuICBOID0ge31cbiAgZm9yIGtleSwgdmFsdWUgb2YgTVxuICAgIGlmIGtleS5lbmRzV2l0aCBcIkNvbW1hbmRcIlxuICAgICAgbmFtZSA9IGtleVxuICAgICAgICAucmVwbGFjZSAvQ29tbWFuZCQvLCBcIlwiXG4gICAgICAgIC5yZXBsYWNlIC9eW0EtWl0vLCAoYykgLT4gYy50b0xvd2VyQ2FzZSgpXG4gICAgICBOWyBuYW1lIF0gPSBwcm94eSB2YWx1ZVxuICAgIGVsc2UgaWYga2V5LmVuZHNXaXRoIFwiQ2xpZW50XCJcbiAgICAgIGNsaWVudCA9IG5ldyB2YWx1ZSBvcHRpb25zXG4gIE5cblxudHVybiA9IChub2Rlcywgc3RhdGUsIGNvbnRleHQpIC0+XG4gIGZvciBub2RlIGluIG5vZGVzXG4gICAgaWYgbm9kZS5wYXR0ZXJuID09IHN0YXRlLm5hbWUgfHwgbm9kZS5wYXR0ZXJuLnRlc3Q/IHN0YXRlLm5hbWVcbiAgICAgIGlmIG5vZGUuYWN0aW9uP1xuICAgICAgICBhd2FpdCBub2RlLmFjdGlvbiBjb250ZXh0LCBzdGF0ZVxuICAgICAgaWYgbm9kZS5yZXN1bHQ/XG4gICAgICAgIHN0YXRlLnJlc3VsdCA9IGF3YWl0IG5vZGUucmVzdWx0IGNvbnRleHQsIHN0YXRlXG4gICAgICBlbHNlIGlmIG5vZGUubmV4dD9cbiAgICAgICAgb3JpZ2luYWwgPSBzdGF0ZS5uYW1lXG4gICAgICAgIHN0YXRlLm5hbWUgPSBhd2FpdCBub2RlLm5leHQgY29udGV4dCwgc3RhdGVcbiAgICAgICAgY29uc29sZS5sb2cgXCIje29yaWdpbmFsfSAtPiAje3N0YXRlLm5hbWV9XCJcbiAgICAgICAgaWYgbm9kZS5ub2Rlcz9cbiAgICAgICAgICB0cnlcbiAgICAgICAgICAgIGF3YWl0IHR1cm4gbm9kZS5ub2Rlcywgc3RhdGUsIGNvbnRleHRcbiAgICAgICAgICBjYXRjaCBlcnJvclxuICAgICAgICAgICAgaWYgISAvXlVua25vd24gc3RhdGUvLnRlc3QgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAjIGlmIHdlIGdldCBoZXJlLCBubyBub2RlcyBtYXRjaGVkLCB3aGljaCBpcyBhIGJhZCBzdGF0ZVxuICB0aHJvdyBuZXcgRXJyb3IgXCJVbmtub3duIHN0YXRlIFsgI3tzdGF0ZS5uYW1lfSBdXCJcblxucnVuTmV0d29yayA9IChub2Rlcywgc3RhdGUsIGNvbnRleHQpIC0+XG4gIGxvb3BcbiAgICBhd2FpdCB0dXJuIG5vZGVzLCBzdGF0ZSwgY29udGV4dFxuICAgIGlmIHN0YXRlLnJlc3VsdD9cbiAgICAgIHJldHVybiBzdGF0ZS5yZXN1bHRcblxuIyBGcm9tIGpveSdzIHBhcnRpdGlvbi5cbnBhcnRpdGlvbiA9IChuLCBpKSAtPlxuICBiYXRjaCA9IFtdXG4gIGZvciB4IGZyb20gaVxuICAgIGJhdGNoLnB1c2ggeFxuICAgIGlmIGJhdGNoLmxlbmd0aCA9PSBuXG4gICAgICB5aWVsZCBiYXRjaFxuICAgICAgYmF0Y2ggPSBbXVxuICBpZiBiYXRjaC5sZW5ndGggPiAwXG4gICAgeWllbGQgYmF0Y2hcblxuZXhwb3J0IHtcbiAgbGlmdFxuICBydW5OZXR3b3JrXG4gIHBhcnRpdGlvblxufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/helpers.coffee