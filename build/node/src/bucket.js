"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.streamObject = exports.putObject = exports.putBucketWebsite = exports.putBucketRedirect = exports.putBucketPolicy = exports.putBucketLifecycle = exports.putBucket = exports.listObjects = exports.headObject = exports.hasObject = exports.hasBucket = exports.getObject = exports.getBucketLifecycle = exports.getBucketARN = exports.emptyBucket = exports.deleteObjects = exports.deleteObject = exports.deleteDirectory = exports.deleteBucketWebsite = exports.deleteBucketPolicy = exports.deleteBucketLifecycle = exports.deleteBucket = void 0;
var S3 = _interopRequireWildcard(require("@aws-sdk/client-s3"));
var _helpers = require("./helpers.js");
var _generic = require("@dashkite/joy/generic");
var _type = require("@dashkite/joy/type");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var AWS, deleteBucket, deleteBucketLifecycle, deleteBucketPolicy, deleteBucketWebsite, deleteDirectory, deleteObject, deleteObjects, emptyBucket, getBucketARN, getBucketLifecycle, getObject, hasBucket, hasObject, headObject, isS3Object, listObjects, putBucket, putBucketLifecycle, putBucketPolicy, putBucketRedirect, putBucketWebsite, putObject, rescueNotFound, streamObject;
exports.streamObject = streamObject;
exports.putObject = putObject;
exports.putBucketWebsite = putBucketWebsite;
exports.putBucketRedirect = putBucketRedirect;
exports.putBucketPolicy = putBucketPolicy;
exports.putBucketLifecycle = putBucketLifecycle;
exports.putBucket = putBucket;
exports.listObjects = listObjects;
exports.headObject = headObject;
exports.hasObject = hasObject;
exports.hasBucket = hasBucket;
exports.getObject = getObject;
exports.getBucketLifecycle = getBucketLifecycle;
exports.getBucketARN = getBucketARN;
exports.emptyBucket = emptyBucket;
exports.deleteObjects = deleteObjects;
exports.deleteObject = deleteObject;
exports.deleteDirectory = deleteDirectory;
exports.deleteBucketWebsite = deleteBucketWebsite;
exports.deleteBucketPolicy = deleteBucketPolicy;
exports.deleteBucketLifecycle = deleteBucketLifecycle;
exports.deleteBucket = deleteBucket;
AWS = {
  S3: (0, _helpers.lift)(S3)
};
rescueNotFound = function (error) {
  var code, ref, ref1;
  code = (ref = error != null ? (ref1 = error.$response) != null ? ref1.statusCode : void 0 : void 0) != null ? ref : error.$metadata.httpStatusCode;
  if (!(code === 403 || code === 404)) {
    throw error;
  }
};
exports.hasBucket = hasBucket = async function (name) {
  var error;
  try {
    await AWS.S3.headBucket({
      Bucket: name
    });
    return true;
  } catch (error1) {
    error = error1;
    rescueNotFound(error);
    return false;
  }
};
exports.getBucketARN = getBucketARN = function (name) {
  return `arn:aws:s3:::${name}`;
};
exports.putBucket = putBucket = async function (name) {
  if (!(await hasBucket(name))) {
    return await AWS.S3.createBucket({
      Bucket: name
    });
  }
};
exports.deleteBucket = deleteBucket = async function (name) {
  if (await hasBucket(name)) {
    return await AWS.S3.deleteBucket({
      Bucket: name
    });
  }
};
exports.getBucketLifecycle = getBucketLifecycle = async function (name) {
  return await AWS.S3.getBucketLifecycleConfiguration({
    Bucket: name
  });
};
exports.putBucketLifecycle = putBucketLifecycle = async function (name, lifecycle) {
  return await AWS.S3.putBucketLifecycleConfiguration({
    Bucket: name,
    LifecycleConfiguration: lifecycle
  });
};
exports.deleteBucketLifecycle = deleteBucketLifecycle = async function (name) {
  return await AWS.S3.deleteBucketLifecycle({
    Bucket: name
  });
};
exports.putBucketPolicy = putBucketPolicy = function (name, policy) {
  return AWS.S3.putBucketPolicy({
    Bucket: name,
    Policy: JSON.stringify(policy)
  });
};
exports.deleteBucketPolicy = deleteBucketPolicy = function (name) {
  return AWS.S3.deleteBucketPolicy({
    Bucket: name
  });
};
exports.putBucketWebsite = putBucketWebsite = function (name, {
  index,
  error
}) {
  return AWS.S3.putBucketWebsite({
    Bucket: name,
    WebsiteConfiguration: {
      IndexDocument: {
        Suffix: index
      },
      ErrorDocument: {
        Key: error
      }
    }
  });
};
exports.putBucketRedirect = putBucketRedirect = function (name, target) {
  return AWS.S3.putBucketWebsite({
    Bucket: name,
    WebsiteConfiguration: {
      RedirectAllRequestsTo: {
        HostName: target
      }
    }
  });
};
exports.deleteBucketWebsite = deleteBucketWebsite = function (name) {
  return AWS.S3.deleteBucketWebsite({
    Bucket: name
  });
};
exports.headObject = headObject = async function (name, key) {
  var error;
  try {
    return await AWS.S3.headObject({
      Bucket: name,
      Key: key
    });
  } catch (error1) {
    error = error1;
    rescueNotFound(error);
    return null;
  }
};
exports.hasObject = hasObject = async function (name, key) {
  if ((await headObject(name, key)) != null) {
    return true;
  } else {
    return false;
  }
};
exports.getObject = getObject = async function (name, key) {
  var error;
  try {
    return await AWS.S3.getObject({
      Bucket: name,
      Key: key
    });
  } catch (error1) {
    error = error1;
    rescueNotFound(error);
    return null;
  }
};
isS3Object = function (value) {
  return (0, _type.isObject)(value) && value.Body != null;
};
exports.streamObject = streamObject = (0, _generic.generic)({
  name: "streamObject"
});
(0, _generic.generic)(streamObject, isS3Object, _type.isString, function ({
  Body
}, encoding) {
  if (encoding === "binary") {
    return Body;
  } else {
    return new Promise(function (resolve, reject) {
      var output;
      Body.setEncoding(encoding);
      output = "";
      Body.on("data", function (chunk) {
        return output += chunk;
      });
      Body.on("error", function (error) {
        return reject(error);
      });
      return Body.on("end", function () {
        return resolve(output);
      });
    });
  }
});
(0, _generic.generic)(streamObject, isS3Object, function (object) {
  return streamObject(object, "utf8");
});
(0, _generic.generic)(streamObject, _type.isString, _type.isString, _type.isString, async function (name, key, encoding) {
  return streamObject(await getObject(name, key), encoding);
});
(0, _generic.generic)(streamObject, _type.isString, _type.isString, async function (name, key) {
  return streamObject(await getObject(name, key));
});
exports.putObject = putObject = function (parameters) {
  return AWS.S3.putObject(parameters);
};
exports.deleteObject = deleteObject = async function (name, key) {
  if (await hasObject(name, key)) {
    return await AWS.S3.deleteObject({
      Bucket: name,
      Key: key
    });
  }
};
exports.deleteObjects = deleteObjects = async function (name, keys) {
  var key;
  return await AWS.S3.deleteObjects({
    Bucket: name,
    Delete: {
      Objects: function () {
        var i, len, results;
        results = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          results.push({
            Key: key
          });
        }
        return results;
      }(),
      Quiet: true
    }
  });
};
exports.listObjects = listObjects = async function (name, prefix, items = [], token) {
  var Contents, IsTruncated, NextContinuationToken, parameters;
  parameters = {
    Bucket: name,
    MaxKeys: 1000
  };
  if (token != null) {
    parameters.ContinuationToken = token;
  }
  if (prefix != null) {
    parameters.Prefix = prefix;
  }
  ({
    IsTruncated,
    Contents = [],
    NextContinuationToken
  } = await AWS.S3.listObjectsV2(parameters));
  if (IsTruncated) {
    items = items.concat(Contents);
    return await listObjects(name, prefix, items, NextContinuationToken);
  } else {
    return items.concat(Contents);
  }
};
exports.deleteDirectory = deleteDirectory = async function (name, prefix) {
  var batch, i, keys, len, object, ref, ref1, results;
  keys = [];
  ref = await listObjects(name, prefix);
  for (i = 0, len = ref.length; i < len; i++) {
    object = ref[i];
    keys.push(object.Key);
  }
  ref1 = (0, _helpers.partition)(1000, keys);
  results = [];
  for (batch of ref1) {
    if (batch.length > 0) {
      // Is this neccessary?
      results.push(await deleteObjects(name, batch));
    } else {
      results.push(void 0);
    }
  }
  return results;
};
exports.emptyBucket = emptyBucket = function (name) {
  return deleteDirectory(name);
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/bucket.coffee