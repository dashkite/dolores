"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitCollection = exports.upsertCollection = exports.scan = exports.putItem = exports.publishCollection = exports.incrementItem = exports.getItem = exports.getDatabase = exports.getCollection = exports.deleteItem = exports.deleteDatabase = exports.deleteCollection = exports.createDatabase = exports.Item = void 0;
var _secrets = require("./secrets.js");
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Fn = _interopRequireWildcard(require("@dashkite/joy/function"));
var Time = _interopRequireWildcard(require("@dashkite/joy/time"));
var _nodeFetch = _interopRequireDefault(require("node-fetch"));
var _pandaSkyClient = _interopRequireDefault(require("panda-sky-client"));
var _mimeTypes = _interopRequireDefault(require("mime-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Item, cache, createDatabase, createRequest, deleteCollection, deleteDatabase, deleteItem, getCollection, getContentType, getDatabase, getItem, h, incrementItem, publishCollection, putItem, scan, upsertCollection, waitCollection;
exports.waitCollection = waitCollection;
exports.upsertCollection = upsertCollection;
exports.scan = scan;
exports.putItem = putItem;
exports.publishCollection = publishCollection;
exports.incrementItem = incrementItem;
exports.getItem = getItem;
exports.getDatabase = getDatabase;
exports.getCollection = getCollection;
exports.deleteItem = deleteItem;
exports.deleteDatabase = deleteDatabase;
exports.deleteCollection = deleteCollection;
exports.createDatabase = createDatabase;
exports.Item = Item;
cache = {
  url: "https://graphene-alpha.dashkite.io",
  apiKey: null,
  client: null
};
h = {
  resource: Fn.curry(Fn.rtee(function (resource, context) {
    return context.resource = resource;
  })),
  method: Fn.curry(Fn.rtee(function (method, context) {
    return context.method = method;
  })),
  parameters: Fn.curry(Fn.rtee(function (parameters, context) {
    return context.parameters = parameters;
  })),
  content: Fn.curry(Fn.rtee(function (content, context) {
    return context.content = content;
  })),
  headers: Fn.curry(Fn.rtee(function (headers, context) {
    if (context.headers == null) {
      context.headers = {};
    }
    return Object.assign(context.headers, headers);
  }))
};
createRequest = function (fx) {
  return {
    issue: async function () {
      var apiKey, body, client, context, headers, json, method, parameters, resource, response;
      apiKey = await async function () {
        return cache.apiKey != null ? cache.apiKey : cache.apiKey = await (0, _secrets.getSecret)("dashkite-api-key");
      }();
      client = await async function () {
        return cache.client != null ? cache.client : cache.client = await (0, _pandaSkyClient.default)(cache.url, {
          fetch: _nodeFetch.default,
          headers: {
            "x-api-key": apiKey
          }
        });
      }();
      context = Fn.pipe([function () {
        return {};
      }, ...fx, h.headers({
        "x-api-key": apiKey
      })])();
      ({
        resource,
        parameters,
        method,
        content: body,
        headers
      } = context);
      response = await client[resource](parameters)[method]({
        body,
        headers
      });
      if (response.status !== 204) {
        json = await response.json();
      }
      return {
        status: response.status,
        json: json
      };
    }
  };
};
getContentType = function (path) {
  var ref;
  return (ref = _mimeTypes.default.lookup(path)) != null ? ref : "application/octet-stream";
};
exports.Item = Item = function () {
  class Item {
    static create(_) {
      return Object.assign(new this(), {
        _
      });
    }
    toJSON() {
      return {
        database: this.database,
        collection: this.collection,
        key: this.key,
        content: this.content,
        created: this.created,
        updated: this.updated,
        expires: this.expires
      };
    }
  }
  ;
  Meta.mixin(Item.prototype, [Meta.getters({
    database: function () {
      return this._.database;
    },
    collection: function () {
      return this._.collection;
    },
    key: function () {
      return this._.key;
    },
    created: function () {
      return this._.created;
    },
    updated: function () {
      return this._.updated;
    },
    expires: function () {
      return this._.expires;
    },
    content: function () {
      return this._.content;
    },
    type: function () {
      return getContentType(this.key);
    }
  })]);
  return Item;
}.call(void 0);
exports.getItem = getItem = async function ({
  database,
  collection,
  key
}) {
  var error, request, response;
  request = createRequest([h.resource("item"), h.method("get"), h.parameters({
    database,
    collection,
    key
  })]);
  try {
    response = await request.issue();
    return Item.create(response.json);
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return null;
    } else if (error.status != null) {
      throw new Error(`graphene: get failed with status ${error.status} for [ ${database} ][ ${collection} ][ ${key} ]`);
    } else {
      throw error;
    }
  }
};
exports.putItem = putItem = async function ({
  database,
  collection,
  key,
  content
}) {
  var error, item, request, response;
  item = Item.create({
    database,
    collection,
    key,
    content
  });
  request = createRequest([h.resource("item"), h.method("put"), h.parameters(item), h.content(item)]);
  try {
    response = await request.issue();
    return Item.create(response.json);
  } catch (error1) {
    error = error1;
    if (error.status != null) {
      throw new Error(`graphene: put failed with status ${error.status} for [ ${database} ][ ${collection} ][ ${key} ]`);
    } else {
      throw error;
    }
  }
};
exports.deleteItem = deleteItem = async function ({
  database,
  collection,
  key
}) {
  var error, request, response;
  request = createRequest([h.resource("item"), h.method("delete"), h.parameters({
    database,
    collection,
    key
  })]);
  try {
    response = await request.issue();
    return {
      itemDeleted: true
    };
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return {
        itemDeleted: false
      };
    } else if (error.status != null) {
      throw new Error(`graphene: delete failed with status ${error.status} for [ ${database} ][ ${collection} ][ ${key} ]`);
    } else {
      throw error;
    }
  }
};
exports.scan = scan = async function ({
  database,
  collection,
  filter,
  token
}) {
  var _, error, request, response;
  _ = filter != null ? JSON.stringify(filter) : void 0;
  request = createRequest([h.resource("items"), h.method("get"), h.parameters({
    database,
    collection,
    filter: _,
    token
  })]);
  try {
    response = await request.issue();
    return {
      list: function () {
        var i, len, ref, results;
        ref = response.json.list;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          _ = ref[i];
          results.push(Item.create(_));
        }
        return results;
      }(),
      token: response.json.token
    };
  } catch (error1) {
    error = error1;
    if (error.status != null) {
      throw new Error(`graphene: scan failed with status ${error.status} for [ ${database} ][ ${collection} ]`);
    } else {
      throw error;
    }
  }
};
exports.incrementItem = incrementItem = async function ({
  database,
  collection,
  key,
  increments
}) {
  var error, request;
  request = createRequest([h.resource("increment"), h.method("post"), h.parameters({
    database,
    collection,
    key
  }), h.content({
    increments
  })]);
  try {
    return await request.issue();
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return {
        itemDeleted: false
      };
    } else if (error.status != null) {
      throw new Error(`graphene: item increment failed with status ${error.status} for [ ${database} ][ ${collection} ][ ${key} ]`);
    } else {
      throw error;
    }
  }
};
exports.createDatabase = createDatabase = async function ({
  name
}) {
  var error, request, response;
  request = createRequest([h.resource("databases"), h.method("post"), h.parameters({
    name
  })]);
  try {
    response = await request.issue();
    return response.json;
  } catch (error1) {
    error = error1;
    if (error.status != null) {
      throw new Error(`graphene: database creation failed with status ${error.status}`);
    } else {
      throw error;
    }
  }
};
exports.getDatabase = getDatabase = async function ({
  address
}) {
  var error, request, response;
  request = createRequest([h.resource("database"), h.method("get"), h.parameters({
    address
  })]);
  try {
    response = await request.issue();
    return response.json;
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return null;
    } else if (error.status != null) {
      throw new Error(`graphene: database get failed with status ${error.status} for [ ${address} ]`);
    } else {
      throw error;
    }
  }
};
exports.deleteDatabase = deleteDatabase = async function ({
  address
}) {
  var error, request;
  request = createRequest([h.resource("database"), h.method("delete"), h.parameters({
    address
  })]);
  try {
    await request.issue();
    return {
      databaseDeleted: true
    };
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return {
        databaseDeleted: false
      };
    } else if (error.status != null) {
      throw new Error(`graphene: database delete failed with status ${error.status} for [ ${address} ]`);
    } else {
      throw error;
    }
  }
};
exports.upsertCollection = upsertCollection = async function ({
  database,
  byname,
  name,
  views
}) {
  var error, request, response;
  request = createRequest([h.resource("collection"), h.method("post"), h.parameters({
    database,
    byname
  }), h.content({
    database,
    byname,
    name,
    views
  })]);
  try {
    response = await request.issue();
    return response.json;
  } catch (error1) {
    error = error1;
    if (error.status != null) {
      throw new Error(`graphene: collection post failed with status ${error.status} for [ ${database} ][ ${collection} ]`);
    } else {
      throw error;
    }
  }
};
exports.getCollection = getCollection = async function ({
  database,
  byname
}) {
  var error, request, response;
  request = createRequest([h.resource("collection"), h.method("get"), h.parameters({
    database,
    byname
  })]);
  try {
    response = await request.issue();
    return response.json;
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return null;
    } else if (error.status != null) {
      throw new Error(`graphene: collection get failed with status ${error.status} for [ ${database} ][ ${byname} ]`);
    } else {
      throw error;
    }
  }
};
exports.deleteCollection = deleteCollection = async function ({
  database,
  byname
}) {
  var error, request;
  request = createRequest([h.resource("collection"), h.method("delete"), h.parameters({
    database,
    byname
  })]);
  try {
    await request.issue();
    return {
      collectionDeleted: true
    };
  } catch (error1) {
    error = error1;
    if (error.status === 404) {
      return {
        collectionDeleted: false
      };
    } else if (error.status != null) {
      throw new Error(`graphene: database delete failed with status ${error.status} for [ ${address} ]`);
    } else {
      throw error;
    }
  }
};
exports.waitCollection = waitCollection = async function ({
  database,
  byname
}) {
  var collection, count;
  collection = await getCollection({
    database,
    byname
  });
  count = 0;
  while (true) {
    if (count++ > 5) {
      throw new Error(`graphene: collection [ ${database} ][ ${byname} ] failed to stabilize`);
    } else if (collection == null) {
      throw new Error(`graphene: collection [ ${database} ][ ${byname} ] is not found`);
    } else if (collection.status !== "ready") {
      count++;
      await Time.sleep(5000);
    } else {
      return collection;
    }
  }
};
exports.publishCollection = publishCollection = async function ({
  database,
  byname,
  name,
  views
}) {
  await upsertCollection({
    database,
    byname,
    name,
    views
  });
  return await waitCollection({
    database,
    byname
  });
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/graphene-alpha.coffee